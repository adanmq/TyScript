// TyFlow Script Description:
//
// This script sorts particles within a TyFlow event based on their scale magnitude and assigns them a custom ID.
// It's intended to organize particles into different target groups for further operations within the simulation.
//
// Steps performed by this script:
// 1. Retrieves lower and upper scale limit values, which define the range of scale magnitudes to consider.
// 2. Initializes all particles with a default custom ID of -1 to signify they have not been processed yet.
// 3. Collects the scale magnitudes of particles that fall within the defined limits and stores them along with their simulation indices.
// 4. Sorts the collected particles in descending order based on their scale magnitude.
// 5. Calculates and assigns a new custom ID to each particle based on its sorted position, ensuring that particles are grouped 
//    and identified according to their relative size within the simulation.
//
// The script operates under the following assumptions:
// - 'LowerScaleLimit' and 'UpperScaleLimit' are defined and accessible as floats within the script's environment.
// - 'StartID' is the initial value for custom IDs and is incremented as new IDs are assigned to sorted particles.
// - 'NumTargets' determines the number of groups into which particles will be divided.
// - Particles are evenly distributed among the targets, with the remainder being distributed to the first groups.
//
// Variables used in the script:
// - lowerScaleLimit: The minimum scale magnitude for particles to be included in the sorting process.
// - upperScaleLimit: The maximum scale magnitude for particles to be included in the sorting process.
// - particleScales: A list that holds tuples of particle scale magnitudes and their corresponding simulation indices.
// - startID: The starting point for custom ID assignment.
// - numTargets: The number of distinct groups or targets for particle assignment.
// - particlesPerTarget: The calculated number of particles per target.
// - remainder: The number of particles that don't fit evenly into the target groups.
// - counter: Used to distribute the remainder particles across the first few groups.

public void simulationStart()
{
}

public void simulationStep()
{
    // Retrieve scale limit values from the environment or settings.
    float lowerScaleLimit = GetFloat("LowerScaleLimit");
    float upperScaleLimit = GetFloat("UpperScaleLimit");
    
    // Initialize all particles with a customID of -1.
    for (int i = 0; i < eventParticleCount; i++)
    {
        int sInx = tf.GetSimIndex(i);
        tf.SetCustomFloat(sInx, "customID", -1);
    }

    // Structure to store scale magnitudes and simulation indices within the limits.
    List<Tuple<float, int>> particleScales = new List<Tuple<float, int>>();

    // Collect scale magnitudes and simulation indices if they meet the scale limits.
    for (int i = 0; i < eventParticleCount; i++)
    {
        int sInx = tf.GetSimIndex(i);
        Point3 scale = tf.GetScale(sInx);
        float magnitude = scale.magnitude;

        // Check if the scale magnitude is within the established limits.
        if ((magnitude >= lowerScaleLimit) && (upperScaleLimit == 0 || magnitude <= upperScaleLimit))
        {
            particleScales.Add(new Tuple<float, int>(magnitude, sInx));
        }
    }

    // Sort by scale magnitude in descending order.
    particleScales.Sort((a, b) => b.Item1.CompareTo(a.Item1));

    // Get the starting ID from the "StartID" float defined in the script operator.
    float startID = GetFloat("StartID");
    
    // Get the number of targets from the "NumTargets" float.
    float numTargets = GetFloat("NumTargets");

    // Calculate the number of particles that will be assigned to each target.
    int particlesPerTarget = eventParticleCount / (int)numTargets;
    int remainder = eventParticleCount % (int)numTargets;

    // Assign custom IDs based on the new order and the starting ID.
    int counter = 0; // Counter for assigning extra particles to the first groups.
    for (int i = 0; i < particleScales.Count; i++)
    {
        int sInx = particleScales[i].Item2;
        
        // Calculate the custom ID based on group size and remainder.
        float customID;
        if (counter < remainder)
        {
            customID = startID + (float)(i / (particlesPerTarget + 1));
            if (i % (particlesPerTarget + 1) == 0 && i != 0)
                counter++;
        }
        else
        {
            customID = startID + (float)((i - counter) / particlesPerTarget);
        }
        
        // Set the custom ID for the particle.
        tf.SetCustomFloat(sInx, "customID", customID);
    }
}

public void simulationStepThreaded(int startInx, int endInx, int threadInx)					
{
}

public void postSimulationStep()
{
}
